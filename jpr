#!/usr/bin/env python

import sys, os, tempfile
import subprocess
import argparse
import re

from git import Repo

def parseArguments():
    parser = argparse.ArgumentParser()
    args = parser.parse_args()    
    return

def getParentBranch():
    repo = Repo(os.getcwd())
    branch_names = [branch.name for branch in repo.branches]
    if 'deploy/staging' in branch_names:
        return 'deploy/staging'
    else:
        return 'master'

def getCurrentBranch():
    repo = Repo(os.getcwd())
    return repo.active_branch.name

def getMostRecentCommitMessage():
    repo = Repo(os.getcwd())
    return repo.head.commit.message

message_template = """{jira_ticket_number} {initial_message}

_Autogenerated Jira Details:_
{jira_ticket_number} {jira_transition}
Jira Link: https://dor.atlassian.net/browse/{jira_ticket_number}
"""

def getMessage(initial_message, jira_ticket_number=None, jira_transition='#Ready'):
    EDITOR = os.environ.get('EDITOR','vim') #that easy!

    if jira_ticket_number is not None:
        initial_message = message_template.format(
            initial_message=initial_message,
            jira_ticket_number=jira_ticket_number,
            jira_transition=jira_transition if jira_transition is not None else ''
        )
    initial_message = bytes(initial_message, 'ascii')

    with tempfile.NamedTemporaryFile(suffix=".tmp") as tf:
        tf.write(initial_message)
        tf.flush()
        subprocess.call([EDITOR, tf.name])
        tf.flush()

        # do the parsing with `tf` using regular File operations.
        # for instance:
        tf.seek(0)
        edited_message = tf.read()

        print('Edited message', edited_message)

    return edited_message

pr_command_tempate = "hub pull-request -F {file} -b {branch}"
def openPR(branch, message):
    with tempfile.NamedTemporaryFile(suffix=".tmp") as tf:
        tf.write(message)
        tf.flush()

        pr_command = pr_command_tempate.format(
            file=tf.name,
            branch=branch
        )

        print(pr_command)

        subprocess.check_call(pr_command, shell=True)

def main():
    parent_branch = getParentBranch()
    current_branch = getCurrentBranch()
    most_recent_commit_message = getMostRecentCommitMessage()

    jira_ticket_number = re.search('\d+-[\dA-Z]+(?!-?[a-zA-Z]{1,10})', current_branch[::-1])
    if jira_ticket_number:
        jira_ticket_number = jira_ticket_number.group(0)[::-1]

    if not jira_ticket_number:
        jira_ticket_number = input('Jira ticket: ')
        if jira_ticket_number == '':
            jira_ticket_number = None

    message = getMessage(most_recent_commit_message, jira_ticket_number=jira_ticket_number)

    pr_details = """
~~~Opening PR~~~
Branch: {branch}
Message:
{message}

yes? """.format(branch=parent_branch, message=message.decode('utf-8'))

    input(pr_details)

    openPR(parent_branch, message)


if __name__ == "__main__":
    main()
